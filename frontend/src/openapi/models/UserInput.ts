/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ProjectEntity } from './ProjectEntity';
import {
    ProjectEntityFromJSON,
    ProjectEntityFromJSONTyped,
    ProjectEntityToJSON,
    ProjectEntityToJSONTyped,
} from './ProjectEntity';

/**
 * 
 * @export
 * @interface UserInput
 */
export interface UserInput {
    /**
     * 
     * @type {string}
     * @memberof UserInput
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof UserInput
     */
    surname: string;
    /**
     * 
     * @type {Set<ProjectEntity>}
     * @memberof UserInput
     */
    projects?: Set<ProjectEntity> | null;
}

/**
 * Check if a given object implements the UserInput interface.
 */
export function instanceOfUserInput(value: object): value is UserInput {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('surname' in value) || value['surname'] === undefined) return false;
    return true;
}

export function UserInputFromJSON(json: any): UserInput {
    return UserInputFromJSONTyped(json, false);
}

export function UserInputFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserInput {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'surname': json['surname'],
        'projects': json['projects'] == null ? undefined : (new Set((json['projects'] as Array<any>).map(ProjectEntityFromJSON))),
    };
}

export function UserInputToJSON(json: any): UserInput {
    return UserInputToJSONTyped(json, false);
}

export function UserInputToJSONTyped(value?: UserInput | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'surname': value['surname'],
        'projects': value['projects'] == null ? undefined : (Array.from(value['projects'] as Set<any>).map(ProjectEntityToJSON)),
    };
}

