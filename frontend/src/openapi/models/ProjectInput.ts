/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserEntity } from './UserEntity';
import {
    UserEntityFromJSON,
    UserEntityFromJSONTyped,
    UserEntityToJSON,
    UserEntityToJSONTyped,
} from './UserEntity';

/**
 * 
 * @export
 * @interface ProjectInput
 */
export interface ProjectInput {
    /**
     * 
     * @type {string}
     * @memberof ProjectInput
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectInput
     */
    description: string;
    /**
     * 
     * @type {number}
     * @memberof ProjectInput
     */
    imageId?: number | null;
    /**
     * 
     * @type {Set<UserEntity>}
     * @memberof ProjectInput
     */
    users?: Set<UserEntity>;
}

/**
 * Check if a given object implements the ProjectInput interface.
 */
export function instanceOfProjectInput(value: object): value is ProjectInput {
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    return true;
}

export function ProjectInputFromJSON(json: any): ProjectInput {
    return ProjectInputFromJSONTyped(json, false);
}

export function ProjectInputFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProjectInput {
    if (json == null) {
        return json;
    }
    return {
        
        'title': json['title'],
        'description': json['description'],
        'imageId': json['imageId'] == null ? undefined : json['imageId'],
        'users': json['users'] == null ? undefined : (new Set((json['users'] as Array<any>).map(UserEntityFromJSON))),
    };
}

export function ProjectInputToJSON(json: any): ProjectInput {
    return ProjectInputToJSONTyped(json, false);
}

export function ProjectInputToJSONTyped(value?: ProjectInput | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'title': value['title'],
        'description': value['description'],
        'imageId': value['imageId'],
        'users': value['users'] == null ? undefined : (Array.from(value['users'] as Set<any>).map(UserEntityToJSON)),
    };
}

