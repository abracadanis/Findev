/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ImageEntity } from './ImageEntity';
import {
    ImageEntityFromJSON,
    ImageEntityFromJSONTyped,
    ImageEntityToJSON,
    ImageEntityToJSONTyped,
} from './ImageEntity';

/**
 * 
 * @export
 * @interface ProjectEntity
 */
export interface ProjectEntity {
    /**
     * 
     * @type {number}
     * @memberof ProjectEntity
     */
    id?: number;
    /**
     * 
     * @type {ImageEntity}
     * @memberof ProjectEntity
     */
    image?: ImageEntity;
    /**
     * 
     * @type {string}
     * @memberof ProjectEntity
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectEntity
     */
    description?: string;
}

/**
 * Check if a given object implements the ProjectEntity interface.
 */
export function instanceOfProjectEntity(value: object): value is ProjectEntity {
    return true;
}

export function ProjectEntityFromJSON(json: any): ProjectEntity {
    return ProjectEntityFromJSONTyped(json, false);
}

export function ProjectEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProjectEntity {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'image': json['image'] == null ? undefined : ImageEntityFromJSON(json['image']),
        'title': json['title'] == null ? undefined : json['title'],
        'description': json['description'] == null ? undefined : json['description'],
    };
}

export function ProjectEntityToJSON(json: any): ProjectEntity {
    return ProjectEntityToJSONTyped(json, false);
}

export function ProjectEntityToJSONTyped(value?: ProjectEntity | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'image': ImageEntityToJSON(value['image']),
        'title': value['title'],
        'description': value['description'],
    };
}

